name: Get screenshots
description: Install a snap in a VM and get screenshots of it running
author: Snapcrafters
branding:
  icon: camera
  color: orange

inputs:
  issue-number:
    description: "The issue number to post the screenshots into"
    required: true
  ci-repo:
    description: "The repo to fetch tools/templates from. Only for debugging."
    default: "snapcrafters/ci"
    required: false
  channel:
    description: "The channel to install the snap from"
    default: "latest/candidate"
    required: false
  github-token:
    description: "A token with permissions to comment on issues"
    required: true
  snap-application-name:
    description: "The name of the application defined in `snapcraft.yaml` to run for screenshots."
    required: false
  snapcraft-project-root:
    description: "The root of the snapcraft project, where the `snapcraft` command would usually be executed from."
    required: false
  screenshots-repo:
    description: "The repository where screenshots should be uploaded."
    default: "snapcrafters/ci-screenshots"
    required: false
  screenshots-token:
    description: "A token with permissions to commit files to the screenshots repo"
    required: true

outputs:
  screen:
    description: "URL to a screenshot of the full screen of the VM"
    value: ${{ steps.screenshots.outputs.screen }}
  window:
    description: "URL to a screenshot of the full screen of the VM"
    value: ${{ steps.screenshots.outputs.window }}

runs:
  using: composite
  steps:
    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup ghvmctl
      uses: snapcrafters/ci/setup-ghvmctl@main

    - name: Fetch build manifests
      uses: snapcrafters/ci/fetch-manifests@main
      with:
        token: ${{ inputs.github-token }}

    - name: Find and parse snapcraft.yaml
      id: snapcraft-yaml
      uses: snapcrafters/ci/parse-snapcraft-yaml@main
      with:
        snapcraft-project-root: ${{ inputs.snapcraft-project-root }}

    - name: Prepare VM
      shell: bash
      env:
        snap_name: ${{ steps.snapcraft-yaml.outputs.snap-name }}
        snap_app: ${{ inputs.snap-application-name }}
      run: |
        ghvmctl prepare

        # If we got a manifest file then parse the revision from it
        if ls manifest-amd64.yaml &>/dev/null; then
          rev="$(yq -r '.revision' manifest-amd64.yaml)"
          echo "Installing snap revision '${rev}' from build manifest"
          ghvmctl snap-install "${snap_name}" --revision "${rev}"
        else
          echo "Installing snap from '${{ inputs.channel}}'"
          ghvmctl snap-install "${snap_name}" --channel "${{ inputs.channel }}"
        fi

        # If the snap-application-name is empty, default to the name of the snap
        if [[ -z "$snap_app" ]]; then
          snap_app="$snap_name"
        fi

        ghvmctl snap-run "${snap_name}.${snap_app}"
        sleep 60

    - name: Gather screenshots
      shell: bash
      run: |
        ghvmctl screenshot-full
        ghvmctl screenshot-window

    - name: Output application logs
      shell: bash
      env:
        snap_name: ${{ steps.snapcraft-yaml.outputs.snap-name }}
      run: |
        ghvmctl exec "cat /home/ubuntu/${snap_name}.log"

    - name: Checkout screenshots repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.screenshots-repo }}
        path: ci-screenshots
        token: ${{ inputs.screenshots-token }}

    - name: Upload screenshots to screenshots repo
      shell: bash
      id: screenshots
      env:
        snap_name: ${{ steps.snapcraft-yaml.outputs.snap-name }}
      run: |
        file_prefix="$(date +%Y%m%d)-${snap_name}-${{ inputs.issue-number }}"

        pushd ci-screenshots || exit 1
        cp -L "$HOME/ghvmctl-screenshots/screenshot-screen.png" "${file_prefix}-screen.png"
        cp -L "$HOME/ghvmctl-screenshots/screenshot-window.png" "${file_prefix}-window.png"

        git config --global user.email "merlijn.sebrechts+snapcrafters-bot@gmail.com"
        git config --global user.name "Snapcrafters Bot"

        git add -A .
        git commit -m "data: screenshots for snapcrafters/${snap_name}#${{ inputs.issue-number }}"
        git push origin main

        echo "screen=https://raw.githubusercontent.com/${{ inputs.screenshots-repo }}/main/${file_prefix}-screen.png" >> "$GITHUB_OUTPUT"
        echo "window=https://raw.githubusercontent.com/${{ inputs.screenshots-repo }}/main/${file_prefix}-window.png" >> "$GITHUB_OUTPUT"

    - name: Comment on call for testing issue with screenshots
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: ${{ inputs.issue-number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `The following screenshots were taken during automated testing:

            ![window](${{ steps.screenshots.outputs.window }})

            ![screen](${{ steps.screenshots.outputs.screen }})
            `
          })
