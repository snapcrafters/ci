name: 'Update snap tag'
description: 'Update the snapcraft.yaml for a given snap with the latest upstream tag'

# Inputs required by the action to perform correctly.
# token: This is the GITHUB_TOKEN that exists for the other repo whose workflow uses this action. Without the other repo's token, this action does not have permission to perform tasks on the other repo, like pushing changes or opening a PR
# repo: This is the repo who is using this action. This repo contains the snapcraft.yaml that this action will be working on.
inputs:
  token:
    description: 'A Github PAT'
    required: true
  repo:
    description: 'The repo containing the snapcraft.yaml to be updated'
    required: true
    default: 'None'
  version-schema:
    description: 'Version schema of snapping repository'
    required: false
  rock-version-schema:
    description: 'Version schema of rock repository'
    required: false
  yaml-path:
    description: 'Path to the YAML file'
    required: false
  readme-path:
    description: 'Path to the README file'
    required: false

# Outputs generated by running this action.
outputs:
  new-snapcraft-yaml:
    description: "Updated snapcraft.yaml"
    value: ${{ steps.updatesnapyaml.outputs.new-snapcraft-yaml }}

# Global env var that can keep track of if there was a change or not. This determines if there are commits to be pushed.
env:
  IS_CHANGE: false
  IS_VERSION_CHANGE: false
  IS_README_CHANGE: false

# The jobs description defining a composite action
runs:
  using: "composite"

  steps:
# Step to checkout the desktop-snaps repo so that we can run updatesnapyaml.py. We need to define a folder called desktop-snaps to avoid the checkout overwriting the other repo's checkout which comes first in the other repo's workflow
    - name: checkout desktop-snaps repo
      uses: actions/checkout@v4
      with:
        repository: 'ubuntu/desktop-snaps'
        ref: stable
        path: desktop-snaps

    - name: install dependencies
      id: dependencies
      run: |
        set -x
        sudo apt update
        sudo apt install snapd
        sudo snap install snapcraft

# Step to run the script that will generate a new output_file with an updated tag, if one is available. If there was a change, then we move this to the snapcraft.yaml and note that there was a change. 
    - name: run updatesnapyaml
      id: updatesnapyaml
      run: |
        set -x
        ./desktop-snaps/updatesnap/updatesnapyaml.py \
          --github-user $GITHUB_USER \
          --github-token $GITHUB_TOKEN \
          ${VERSION_SCHEMA:+--version-schema $VERSION_SCHEMA} \
          ${ROCK_VERSION_SCHEMA:+--rock-version-schema $ROCK_VERSION_SCHEMA} \
          ${YAML_PATH:+--yaml-path $YAML_PATH} \
          ${README_PATH:+--readme-path $README_PATH} \
          https://github.com/${{ github.repository }}

        # Make sure to put the updated snapcraft.yaml file in the right location if it lives in a snap directory
        if [ -f version_file ]; then
          echo "IS_VERSION_CHANGE=true" >> $GITHUB_ENV
          rm version_file
        fi
        if [ -f output_file ]; then
          echo "IS_CHANGE=true" >> $GITHUB_ENV
          if [ -n "$YAML_PATH" ]; then
            mv output_file $YAML_PATH
          elif [ -d snap ]; then
            mv output_file snap/snapcraft.yaml
          else
            mv output_file snapcraft.yaml
          fi
        fi
        # Make sure to put the updated README file in the right location
        if [ -f readme_output ] && [ -n "$README_PATH" ]; then
          echo "IS_README_CHANGE=true" >> $GITHUB_ENV
          mv readme_output "$README_PATH"
        fi
      env:
        GITHUB_USER: ubuntu
        GITHUB_TOKEN: ${{ inputs.token }}
        VERSION_SCHEMA: ${{ inputs.version-schema }}
        ROCK_VERSION_SCHEMA: ${{ inputs.rock-version-schema }}
        YAML_PATH: ${{ inputs.yaml-path }}
        README_PATH: ${{ inputs.readme-path }}
      shell: bash

# Step to remove the desktop-snaps folder so that when we commit changes in another repo, the desktop-snaps folder is not committed there.
    - name: Cleanup
      run: |
        rm -rf desktop-snaps
      shell: bash

# If there was a change detected, try to rebuild the snap to ensure that everything works as expected
    - name: Rebuild the snap
      if: ${{ env.IS_CHANGE || env.IS_VERSION_CHANGE || env.IS_README_CHANGE }}
      run: |
        set -x
        snapcraft -v
      shell: bash

# If there was a change detected, then let's commit the changes
    - name: Commit files
      if: ${{ env.IS_CHANGE || env.IS_VERSION_CHANGE || env.IS_README_CHANGE }}
      run: |
        set -x
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        commit_msg="Update tag"
        if [ "$IS_README_CHANGE" = true ] && [ "$IS_VERSION_CHANGE" = true ] && [ "$IS_CHANGE" = true ]; then
          commit_msg="Update README, snap version, and tag"
        elif [ "$IS_VERSION_CHANGE" = true ] && [ "$IS_CHANGE" = true ]; then
          commit_msg="Update snap version and tag"
        elif [ "$IS_VERSION_CHANGE" = true ]; then
          commit_msg="Update snap version"
        elif [ "$IS_README_CHANGE" = true ]; then
          commit_msg="Update README"
        fi
        git commit -a -m "$commit_msg"
      shell: bash

# If there was a change detected, then let's push the changes
    - name: Push changes
      if: ${{ env.IS_CHANGE || env.IS_VERSION_CHANGE || env.IS_README_CHANGE }}
      uses: ad-m/github-push-action@master
      env:
        GITHUB_USER: ubuntu
        GITHUB_TOKEN: ${{ inputs.token }}
      with:
        branch: ${{ github.ref }}
