name: Create call for testing
description: Create a call for testing for a given snap repository
author: Snapcrafters
branding:
  icon: message-circle
  color: orange

inputs:
  architectures:
    description: "The architectures to build the snap for"
    required: true
  ci-repo:
    description: "The repo to fetch tools/templates from. Only for debugging"
    default: "snapcrafters/ci"
    required: false
  channel:
    description: "The channel to publish the snap to"
    default: "latest/candidate"
    required: false
  github-token:
    description: "A token with permissions to create issues on the repository"
    required: true
  promotion-channel:
    description: "The channel the snap should be promoted to on successful test"
    default: "latest/stable"
    required: false
  snapcraft-project-root:
    description: "The root of the snapcraft project, where the `snapcraft` command would usually be executed from"
    required: false
  snapcraft-channel:
    description: "The channel to install snapcraft from"
    default: latest/stable
    required: false
  store-token:
    description: "A token with permissions to upload to the specified channel"
    required: false
  testing-instructions:
    description: "Custom instructions for testing the `candidate` snap"
    default: |
      1. Stop the application if it was already running
      1. Upgrade to this version by running

        ```shell
        snap refresh {{ env.snap_name }} --channel {{ env.channel }}
        ```

      1. Start the app and test it out.
      1. Finally, add a comment below explaining whether this app is working, and **include the output of the following command**.

        ```shell
        snap version; lscpu | grep Architecture; snap info {{ env.snap_name }} | grep installed
        ```
    required: false

outputs:
  issue-number:
    description: "The issue number containing the call for testing"
    value: ${{ steps.issue.outputs.number }}

runs:
  using: composite
  steps:
    - name: Checkout the source
      uses: actions/checkout@v4

    - name: Fetch build manifests
      uses: snapcrafters/ci/fetch-manifests@main
      with:
        token: ${{ inputs.github-token }}

    - name: Setup snapcraft
      shell: bash
      run: |
        sudo snap install snapcraft --channel "${{inputs.snapcraft-channel}}" --classic

    - name: Find and parse snapcraft.yaml
      id: snapcraft-yaml
      uses: snapcrafters/ci/parse-snapcraft-yaml@main
      with:
        snapcraft-project-root: ${{ inputs.snapcraft-project-root }}

    - name: Write the arch/rev table
      shell: bash
      id: build
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ inputs.store-token }}
        snap_name: ${{ steps.snapcraft-yaml.outputs.snap-name }}
        snapcraft_yaml: ${{ steps.snapcraft-yaml.outputs.yaml-path }}
      run: |
        revisions=()

        # Build the initial structure for the HTML table including the header row.
        table="<table><thead><tr><th>CPU Architecture</th><th>Revision</th></tr></thead><tbody>"

        # If we were able to fetch build manifests from previous step, use those
        if ls -l manifest-*.yaml &>/dev/null; then
          echo "Found build manifests - populating template with revisions from the manifests"
          
          # Iterate over the manifest files and write the table rows for each architecture
          for file in manifest-*.yaml; do
            # Parse the arch and the revision
            arch="$(yq -r '.architecture' "${file}")"
            rev="$(yq -r '.revision' "${file}")"
            # Write the table row and add the revision to the list we're tracking
            table="${table}<tr><td>${arch}</td><td>${rev}</td></tr>"
            revisions+=("$rev")
          done
        else
          echo "No build manifests found - populating template with information from the store"
          
          # Otherwise, get the latest revision for each architecture in the release channel
          # shellcheck disable=SC1083
          for arch in ${{ inputs.architectures }}; do
            rev="$(snapcraft list-revisions "${snap_name}" --arch "$arch" | grep "${{ inputs.channel }}*" | head -n1 | cut -d' ' -f1)"
            revisions+=("$rev")
            # Add a row to the HTML table
            table="${table}<tr><td>${arch}</td><td>${rev}</td></tr>"
          done
        fi

        # Add the closing tags for the table
        table="${table}</tbody></table>"

        # Get a comma separated list of revisions
        printf -v joined '%s,' "${revisions[@]}"

        echo "revisions=${joined%,}" >> "$GITHUB_OUTPUT"
        echo "table=${table}" >> "$GITHUB_OUTPUT"

    - name: Fetch the call for testing template
      shell: bash
      run: |
        wget -qO template.md "https://raw.githubusercontent.com/${{ inputs.ci-repo }}/main/call-for-testing/template.md"

    - name: Create call for testing issue
      uses: JasonEtco/create-an-issue@v2
      id: issue
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        snap_name: ${{ steps.snapcraft-yaml.outputs.snap-name }}
        channel: ${{ inputs.channel }}
        revisions: ${{ steps.build.outputs.revisions }}
        table: ${{ steps.build.outputs.table }}
        version: ${{ steps.snapcraft-yaml.outputs.version }}
        promotion_channel: ${{ inputs.promotion-channel }}
        testing_instructions: ${{ inputs.testing-instructions }}
      with:
        filename: ./template.md
