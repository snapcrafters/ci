name: Release to Candidate
description: Builds a snap using `snapcraft remote-build` and releases it to candidate
author: Snapcrafters
branding:
  icon: tag
  color: orange

inputs:
  architecture:
    description: "The architecture to build the snap for"
    default: amd64
    required: false
  channel:
    description: "The channel to publish the snap to"
    default: "latest/candidate"
    required: false
  launchpad-token:
    description: "A token with permissions to create remote builds on Launchpad"
    required: true
  multi-snap:
    description: "Whether the repo contains the source for multiple snaps"
    required: false
    default: "false"
  repo-token:
    required: true
    description: A token with privileges to create and push tags to the repository.
  snapcraft-project-root:
    description: "The root of the snapcraft project, where the `snapcraft` command would usually be executed from."
    required: false
  snapcraft-channel:
    description: "The channel to install snapcraft from"
    default: latest/stable
    required: false
  store-token:
    description: "A token with permissions to upload to the specified channel"
    required: true

outputs:
  revision:
    description: "The revision of the uploaded snap"
    value: ${{ steps.publish.outputs.revision }}

runs:
  using: composite
  steps:
    - name: Checkout the source
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.repo-token }}
        fetch-depth: 0

    - name: Setup semver tool
      shell: bash
      run: |
        wget -q https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver
        sudo mv semver /usr/bin/semver
        chmod +x /usr/bin/semver

    - name: Setup snapcraft
      id: setup
      shell: bash
      run: |
        sudo snap install snapcraft --channel "${{inputs.snapcraft-channel}}" --classic

        installed_version="$(snapcraft version | cut -d" " -f2)"

        if [[ "$(semver compare "8.2.0" "$installed_version")" == "1" ]]; then
          echo "new-remote-build=false" >> "$GITHUB_OUTPUT"
        else
          echo "new-remote-build=true" >> "$GITHUB_OUTPUT"
        fi

        git config --global user.email "github-actions@github.com"
        git config --global user.name "Github Actions"

    - name: Setup Launchpad credentials
      shell: bash
      env:
        SNAPCRAFT_REMOTE_BUILD_STRATEGY: force-fallback
      run: |
        # For versions of snapcraft after 8.2.0, the path is different
        # shellcheck disable=SC2193
        if [[ "${{ steps.setup.outputs.new-remote-build }}" == "false" || "$SNAPCRAFT_REMOTE_BUILD_STRATEGY" == "force-fallback" ]]; then
          mkdir -p ~/.local/share/snapcraft/provider/launchpad
          echo "${{ inputs.launchpad-token }}" > ~/.local/share/snapcraft/provider/launchpad/credentials
        else
          mkdir -p ~/.local/share/snapcraft
          echo "${{ inputs.launchpad-token }}" > ~/.local/share/snapcraft/launchpad-credentials
        fi

        git config --global user.email "github-actions@github.com"
        git config --global user.name "Github Actions"

    - name: Find and parse snapcraft.yaml
      id: snapcraft-yaml
      uses: snapcrafters/ci/parse-snapcraft-yaml@main
      with:
        snapcraft-project-root: ${{ inputs.snapcraft-project-root }}

    - name: Build the snap (${{ inputs.architecture }})
      id: build
      shell: bash
      env:
        arch: ${{ inputs.architecture }}
        name: ${{ steps.snapcraft-yaml.outputs.snap-name }}
        yaml_path: ${{ steps.snapcraft-yaml.outputs.yaml-path }}
        version: ${{ steps.snapcraft-yaml.outputs.version }}
        project_root: ${{ steps.snapcraft-yaml.outputs.project-root }}
        SNAPCRAFT_REMOTE_BUILD_STRATEGY: force-fallback
      run: |
        snapcraft_args=("--launchpad-accept-public-upload")

        # shellcheck disable=SC2193
        if [[ "$(yq -r '.base' "$yaml_path")" == "core24" ]]; then
          # `core24` uses platforms syntax rather than `architectures`:
          # https://snapcraft.io/docs/architectures
          snapcraft_args+=("--platform $arch")
        elif [[ "${{ steps.setup.outputs.new-remote-build }}" == "false" || "$SNAPCRAFT_REMOTE_BUILD_STRATEGY" == "force-fallback" ]]; then
          # Restrict arch definition to one only in snapcraft.yaml due to:
          # https://bugs.launchpad.net/snapcraft/+bug/1885150
          yq -i '.architectures |= [{"build-on": env(arch)}]' "$yaml_path"
        else
          snapcraft_args+=("--build-for $arch")
        fi

        pushd "$project_root" && git init || exit

        # shellcheck disable=SC2068
        snapcraft remote-build ${snapcraft_args[@]} || true

        # shellcheck disable=SC2086
        cat ${name}_${arch}*.txt || echo "Could not find build log"

        if [[ ! -e "${name}_${version}_${arch}.snap" ]]; then
            echo "Could not find ${name}_${version}_${arch}.snap"
            exit 1
        fi

        popd || exit

        # Write the manifest file which is used by later steps
        echo "snap=${name}_${version}_${arch}.snap" >> "$GITHUB_OUTPUT"
        if  [[ -n "$project_root" ]]; then
            echo "snap=${project_root}/${name}_${version}_${arch}.snap" >> "$GITHUB_OUTPUT"
        fi
        echo "name: ${name}" >> "manifest-${{ inputs.architecture }}.yaml"
        echo "architecture: ${arch}" >> "manifest-${{ inputs.architecture }}.yaml"

    - name: Review the built snap
      uses: diddlesnaps/snapcraft-review-action@v1
      with:
        snap: ${{ steps.build.outputs.snap }}
        isClassic: ${{ steps.snapcraft-yaml.outputs.classic }}
        plugs: ${{ steps.snapcraft-yaml.outputs.plugs-file }}
        slots: ${{ steps.snapcraft-yaml.outputs.slots-file }}

    - name: Release the built snap to ${{ inputs.channel }}
      id: publish
      shell: bash
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ inputs.store-token }}
        SNAP_FILE: ${{ steps.build.outputs.snap }}
      run: |
        snapcraft_out="$(snapcraft push "$SNAP_FILE" --release="${{ inputs.channel }}")"
        revision="$(echo "$snapcraft_out" | grep -Po "Revision \K[^ ]+")"
        echo "revision=${revision}" >> "$GITHUB_OUTPUT"
        echo "revision: ${revision}" >> "manifest-${{ inputs.architecture }}.yaml"

    # Upload the manifest file as an artifact for retrieval during future actions
    - name: Upload revision manifest
      uses: actions/upload-artifact@v4
      with:
        name: "manifest-${{ inputs.architecture }}"
        path: "manifest-${{ inputs.architecture }}.yaml"

    # Create a tag in the repo that corresponds to the revision pushed
    - name: Create tag
      shell: bash
      env:
        multi_snap: ${{ inputs.multi-snap }}
        name: ${{ steps.snapcraft-yaml.outputs.snap-name }}
        version: ${{ steps.snapcraft-yaml.outputs.version }}
      run: |
        git config --global user.name 'Snapcrafters Bot'
        git config --global user.email 'merlijn.sebrechts+snapcrafters-bot@gmail.com'

        revision="${{ steps.publish.outputs.revision }}"

        if [[ "${multi_snap}" == "true" ]]; then
          tag_name="${name}-${version}/rev${revision}/${{ inputs.architecture }}"
        else
          tag_name="${version}/rev${revision}/${{ inputs.architecture }}"
        fi

        git tag -a "$tag_name" -m "Revision ${revision}, released for ${{ inputs.architecture }}"
        git push origin "$tag_name"
