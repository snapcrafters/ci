name: Release to Candidate
description: Builds a snap using `snapcraft remote-build` and releases it to candidate
author: Snapcrafters
branding:
  icon: tag
  color: orange

inputs:
  architecture:
    description: "The architecture to build the snap for"
    default: amd64
    required: false
  channel:
    description: "The channel to publish the snap to"
    default: "candidate"
    required: false
  launchpad-token:
    description: "A token with permissions to create remote builds on Launchpad"
    required: true
  snapcraft-project-root:
    description: "The root of the snapcraft project, where the `snapcraft` command would usually be executed from."
    required: false
  store-token:
    description: "A token with permissions to upload to the specified channel"
    required: true

outputs:
  revision:
    description: "The revision of the uploaded snap"
    value: ${{ steps.publish.outputs.revision }}

runs:
  using: composite
  steps:
    - name: Checkout the source
      uses: actions/checkout@v4

    - name: Setup snapcraft
      shell: bash
      run: |
        sudo snap install snapcraft --classic

        # Setup Launchpad credentials
        mkdir -p ~/.local/share/snapcraft/provider/launchpad
        echo "${{ inputs.launchpad-token }}" > ~/.local/share/snapcraft/provider/launchpad/credentials
        git config --global user.email "github-actions@github.com"
        git config --global user.name "Github Actions"

    - name: Find and parse snapcraft.yaml
      id: snapcraft-yaml
      uses: snapcrafters/ci/parse-snapcraft-yaml@main
      with:
        snapcraft-project-root: ${{ inputs.snapcraft-project-root }}

    - name: Build the snap (${{ inputs.architecture }})
      id: build
      shell: bash
      env:
        arch: ${{ inputs.architecture }}
        name: ${{ steps.snapcraft-yaml.outputs.snap-name }}
        yaml_path: ${{ steps.snapcraft-yaml.outputs.yaml-path }}
        version: ${{ steps.snapcraft-yaml.outputs.version }}
        project_root: ${{ steps.snapcraft-yaml.outputs.project-root }}
      run: |
        # Remove the architecture definition from the snapcraft.yaml due to:
        # https://bugs.launchpad.net/snapcraft/+bug/1885150
        yq -i 'del(.architectures)' "$yaml_path"

        cd "$project_root" || exit 
        snapcraft remote-build --launchpad-accept-public-upload --build-for="${arch}"

        if [[ ! -e "${name}_${version}_${arch}.snap" ]]; then
            echo "Could not find ${name}_${version}_${arch}.snap"
            cat "${name}_${arch}.txt"
            exit 1
        else
            cat "${name}_${arch}.txt"
        fi

        # Write the manifest file which is used by later steps
        echo "snap=${name}_${version}_${arch}.snap" >> "$GITHUB_OUTPUT"
        echo "name: ${name}" >> "manifest-${arch}.yaml"
        echo "architecture: ${arch}" >> "manifest-${arch}.yaml"

    - name: Review the built snap
      uses: diddlesnaps/snapcraft-review-action@v1
      with:
        snap: ${{ steps.build.outputs.snap }}
        isClassic: ${{ steps.snapcraft-yaml.outputs.classic }}
        plugs: ${{ steps.snapcraft-yaml.outputs.plugs-file }}
        slots: ${{ steps.snapcraft-yaml.outputs.slots-file }}

    - name: Release the built snap to latest/${{ inputs.channel }}
      id: publish
      shell: bash
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ inputs.store-token }}
        SNAP_FILE: ${{ steps.build.outputs.snap }}
      run: |
        snapcraft_out="$(snapcraft push "$SNAP_FILE" --release="${{ inputs.channel }}")"
        revision="$(echo "$snapcraft_out" | grep -Po "Revision \K[^ ]+")"
        echo "revision=${revision}" >> "$GITHUB_OUTPUT"
        echo "revision: ${revision}" >> "manifest-${{ inputs.architecture }}.yaml"

    # Upload the manifest file as an artifact for retrieval during future actions
    - name: Upload revision manifest
      uses: actions/upload-artifact@v3.1.3
      with:
        name: "manifests"
        path: "manifest-${{ inputs.architecture }}.yaml"
